name: Test Miniconda Environment Setup

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Windows Setup Script
        shell: cmd
        run: setup_and_run.bat
        
      - name: Verify Python Environment
        shell: cmd
        run: |
          call %USERPROFILE%\miniconda3\Scripts\activate.bat py311
          python -c "import sys; print(f'Python {sys.version}')"
          python -c "import numpy; print(f'NumPy {numpy.__version__}')"
          python -c "import pandas; print(f'Pandas {pandas.__version__}')"

  test-macos-intel:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Make Script Executable
        run: chmod +x setup_and_run.sh
        
      - name: Run macOS Setup Script
        run: ./setup_and_run.sh
        
      - name: Verify Python Environment
        run: |
          source $HOME/miniconda3/bin/activate py311
          python -c "import sys; print(f'Python {sys.version}')"
          python -c "import numpy; print(f'NumPy {numpy.__version__}')"
          python -c "import pandas; print(f'Pandas {pandas.__version__}')"

  test-macos-arm:
    # GitHub Actions doesn't have Apple Silicon runners yet,
    # but we can still test the script's architecture detection logic
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Test Architecture Detection
        run: |
          # Create a modified version of the script for testing
          cat setup_and_run.sh | sed 's/uname -m/echo arm64/' > setup_test.sh
          chmod +x setup_test.sh
          
          # Run the modified script with -n to not execute commands
          bash -n setup_test.sh
          
          # Check if the script would download the ARM installer
          grep_result=$(grep -c "Miniconda3-latest-MacOSX-arm64.sh" setup_test.sh || echo "0")
          if [ "$grep_result" -gt "0" ]; then
            echo "ARM architecture detection works correctly"
          else
            echo "ARM architecture detection failed"
            exit 1
          fi 